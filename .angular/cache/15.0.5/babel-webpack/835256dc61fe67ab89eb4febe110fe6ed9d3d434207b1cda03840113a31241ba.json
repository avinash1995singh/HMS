{"ast":null,"code":"import { AddServiceGroupComponent } from './add-service-group/add-service-group.component';\nimport { MatTableDataSource } from '@angular/material/table';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"src/app/allService/data.service\";\nimport * as i4 from \"@angular/material/table\";\nfunction ServiceGroupComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" Id. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ServiceGroupComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r10.id, \" \");\n  }\n}\nfunction ServiceGroupComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ServiceGroupComponent_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r11.servicename, \" \");\n  }\n}\nfunction ServiceGroupComponent_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" Service Type \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ServiceGroupComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r12.servicetype, \" \");\n  }\n}\nfunction ServiceGroupComponent_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \"Action \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ServiceGroupComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 15)(1, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function ServiceGroupComponent_td_19_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const element_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.edit(element_r13));\n    });\n    i0.ɵɵtext(2, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function ServiceGroupComponent_td_19_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const element_r13 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.delete(element_r13.name, element_r13.id));\n    });\n    i0.ɵɵtext(4, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ServiceGroupComponent_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 17);\n  }\n}\nfunction ServiceGroupComponent_tr_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 18);\n  }\n}\nexport class ServiceGroupComponent {\n  constructor(dialog, spinner, service) {\n    this.dialog = dialog;\n    this.spinner = spinner;\n    this.service = service;\n    this.displayedColumns = ['id', 'servicename', 'servicetype', 'Action'];\n  }\n  ngOnInit() {\n    this.spinner.show();\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1000);\n    this.service.getserviceGroup().subscribe(res => {\n      this.listData = res.data;\n      this.dataSource = new MatTableDataSource(this.listData);\n    });\n  }\n  openDialog() {\n    const dialogRef = this.dialog.open(AddServiceGroupComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      this.ngOnInit();\n    });\n  }\n  edit(name) {\n    const dialogRef = this.dialog.open(AddServiceGroupComponent);\n    dialogRef.componentInstance.dataSourse = name;\n    dialogRef.afterClosed().subscribe(result => {\n      this.ngOnInit();\n    });\n  }\n  delete(name, id) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(result => {\n      if (result.isConfirmed) {\n        Swal.fire('Deleted!', 'Your file has been deleted.', 'success');\n      }\n    });\n  }\n}\nServiceGroupComponent.ɵfac = function ServiceGroupComponent_Factory(t) {\n  return new (t || ServiceGroupComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.NgxSpinnerService), i0.ɵɵdirectiveInject(i3.DataService));\n};\nServiceGroupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ServiceGroupComponent,\n  selectors: [[\"app-service-group\"]],\n  decls: 22,\n  vars: 4,\n  consts: [[1, \"btn\", \"btn-sm\", \"btn-primary\", 3, \"click\"], [\"bdColor\", \"rgba(0, 0, 0, .4)\", \"size\", \"default\", \"color\", \"black\", \"type\", \"square-loader\", 3, \"fullScreen\"], [2, \"color\", \"rgb(8, 1, 1)\"], [1, \"m-4\"], [1, \"table-heading\"], [\"mat-table\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [\"matColumnDef\", \"id\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"servicename\"], [\"matColumnDef\", \"servicetype\"], [\"matColumnDef\", \"Action\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [1, \"btn\", 3, \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function ServiceGroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function ServiceGroupComponent_Template_button_click_0_listener() {\n        return ctx.openDialog();\n      });\n      i0.ɵɵtext(1, \"Add Service Group\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"ngx-spinner\", 1);\n      i0.ɵɵelement(3, \"p\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4);\n      i0.ɵɵtext(6, \"Service Group List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"table\", 5);\n      i0.ɵɵelementContainerStart(8, 6);\n      i0.ɵɵtemplate(9, ServiceGroupComponent_th_9_Template, 2, 0, \"th\", 7);\n      i0.ɵɵtemplate(10, ServiceGroupComponent_td_10_Template, 2, 1, \"td\", 8);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(11, 9);\n      i0.ɵɵtemplate(12, ServiceGroupComponent_th_12_Template, 2, 0, \"th\", 7);\n      i0.ɵɵtemplate(13, ServiceGroupComponent_td_13_Template, 2, 1, \"td\", 8);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(14, 10);\n      i0.ɵɵtemplate(15, ServiceGroupComponent_th_15_Template, 2, 0, \"th\", 7);\n      i0.ɵɵtemplate(16, ServiceGroupComponent_td_16_Template, 2, 1, \"td\", 8);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(17, 11);\n      i0.ɵɵtemplate(18, ServiceGroupComponent_th_18_Template, 2, 0, \"th\", 7);\n      i0.ɵɵtemplate(19, ServiceGroupComponent_td_19_Template, 5, 0, \"td\", 8);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(20, ServiceGroupComponent_tr_20_Template, 1, 0, \"tr\", 12);\n      i0.ɵɵtemplate(21, ServiceGroupComponent_tr_21_Template, 1, 0, \"tr\", 13);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"fullScreen\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  dependencies: [i4.MatTable, i4.MatHeaderCellDef, i4.MatHeaderRowDef, i4.MatColumnDef, i4.MatCellDef, i4.MatRowDef, i4.MatHeaderCell, i4.MatCell, i4.MatHeaderRow, i4.MatRow, i2.NgxSpinnerComponent],\n  styles: [\".btn-primary[_ngcontent-%COMP%]{\\r\\n    color: #fff;\\r\\n        background-color: #348fe2;\\r\\n        border-color: #348fe2;\\r\\n        margin-left: calc(100% - 16%);\\r\\n}\\r\\n\\r\\n.table-heading[_ngcontent-%COMP%]{\\r\\n    background-color: #1b2221;\\r\\n    color: #fff;\\r\\n    padding: 8px;\\r\\n    font-size: large;\\r\\n   \\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvYWRtaW4vc2VydmljZS1ncm91cC9zZXJ2aWNlLWdyb3VwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO1FBQ1AseUJBQXlCO1FBQ3pCLHFCQUFxQjtRQUNyQiw2QkFBNkI7QUFDckM7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7O0VBRWxCIiwic291cmNlc0NvbnRlbnQiOlsiLmJ0bi1wcmltYXJ5e1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzM0OGZlMjtcclxuICAgICAgICBib3JkZXItY29sb3I6ICMzNDhmZTI7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGNhbGMoMTAwJSAtIDE2JSk7XHJcbn1cclxuXHJcbi50YWJsZS1oZWFkaW5ne1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFiMjIyMTtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgXHJcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["AddServiceGroupComponent","MatTableDataSource","Swal","i0","ServiceGroupComponent","constructor","dialog","spinner","service","ngOnInit","show","setTimeout","hide","getserviceGroup","subscribe","res","listData","data","dataSource","openDialog","dialogRef","open","afterClosed","result","edit","name","componentInstance","dataSourse","delete","id","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","isConfirmed","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\HMS\\F-HMS\\src\\app\\pages\\admin\\service-group\\service-group.component.ts","D:\\HMS\\F-HMS\\src\\app\\pages\\admin\\service-group\\service-group.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport { AddServiceGroupComponent } from './add-service-group/add-service-group.component';\nimport { DataService } from 'src/app/allService/data.service';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { MatTableDataSource } from '@angular/material/table';\nimport { PeriodicElement } from '../department/department.component';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-service-group',\n  templateUrl: './service-group.component.html',\n  styleUrls: ['./service-group.component.css']\n})\nexport class ServiceGroupComponent {\n  constructor(public dialog: MatDialog,private spinner: NgxSpinnerService,private service:DataService) {\n  }\n  displayedColumns: string[] = ['id', 'servicename','servicetype','Action'];\n  listData!:PeriodicElement[];\n  dataSource:any;\n  \n  ngOnInit(){\n    this.spinner.show();\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1000);\nthis.service.getserviceGroup().subscribe((res:any)=>{\n  this.listData=res.data;\n  this.dataSource=new MatTableDataSource(this.listData)\n})\n   \n}\n  openDialog(){\n    const dialogRef = this.dialog.open(AddServiceGroupComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      this.ngOnInit()\n    });\n  }\n  edit(name:any){\n    const dialogRef = this.dialog.open(AddServiceGroupComponent);\n    dialogRef.componentInstance.dataSourse = name;\n    dialogRef.afterClosed().subscribe(result => {\n    this.ngOnInit()\n    })\n      }\n      delete(name:any,id:any){\n        Swal.fire({\n          title: 'Are you sure?',\n          text: \"You won't be able to revert this!\",\n          icon: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n          confirmButtonText: 'Yes, delete it!'\n        }).then((result) => {\n          if (result.isConfirmed) {\n            Swal.fire(\n              'Deleted!',\n              'Your file has been deleted.',\n              'success'\n            )\n          }\n        })\n    \n    \n      }\n \n\n}\n","<button  (click)=\"openDialog()\" class=\"btn btn-sm btn-primary\">Add Service Group</button>\n<!-- <ngx-spinner type=\"square-loader\"></ngx-spinner> -->\n<ngx-spinner bdColor = \"rgba(0, 0, 0, .4)\" size = \"default\" color = \"black\" type = \"square-loader\" [fullScreen] = \"true\"><p style=\"color: rgb(8, 1, 1)\" >  </p></ngx-spinner>\n<div class=\"m-4\">\n<div class=\"table-heading\">Service Group List</div>\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n  <!-- Position Column -->\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef> Id. </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n  </ng-container>\n\n  <!-- Name Column -->\n  <ng-container matColumnDef=\"servicename\">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.servicename}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"servicetype\">\n    <th mat-header-cell *matHeaderCellDef> Service Type </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.servicetype}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"Action\">\n    <th mat-header-cell *matHeaderCellDef>Action </th>\n    <td mat-cell *matCellDef=\"let element\"> \n      <button class=\"btn\" (click)=\"edit(element)\">Edit</button> \n      <button class=\"btn\" (click)=\"delete(element.name,element.id)\">Delete</button> \n     </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n</div>\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}